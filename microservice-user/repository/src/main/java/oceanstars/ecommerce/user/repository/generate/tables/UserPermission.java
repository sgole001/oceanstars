/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import oceanstars.ecommerce.user.repository.generate.DefaultSchema;
import oceanstars.ecommerce.user.repository.generate.Keys;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserPermissionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPermission extends TableImpl<UserPermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_permission</code>
     */
    public static final UserPermission USER_PERMISSION = new UserPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPermissionRecord> getRecordType() {
        return UserPermissionRecord.class;
    }

    /**
     * The column <code>user_permission.id</code>.
     */
    public final TableField<UserPermissionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>user_permission.code</code>.
     */
    public final TableField<UserPermissionRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(13).nullable(false), this, "");

    /**
     * The column <code>user_permission.name</code>.
     */
    public final TableField<UserPermissionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_permission.type</code>.
     */
    public final TableField<UserPermissionRecord, Short> TYPE = createField(DSL.name("type"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>user_permission.desc</code>.
     */
    public final TableField<UserPermissionRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>user_permission.enabled</code>.
     */
    public final TableField<UserPermissionRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>user_permission.create_by</code>.
     */
    public final TableField<UserPermissionRecord, String> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_permission.create_at</code>.
     */
    public final TableField<UserPermissionRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>user_permission.update_by</code>.
     */
    public final TableField<UserPermissionRecord, String> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_permission.update_at</code>.
     */
    public final TableField<UserPermissionRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>user_permission.version</code>.
     */
    public final TableField<UserPermissionRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    private UserPermission(Name alias, Table<UserPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPermission(Name alias, Table<UserPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_permission</code> table reference
     */
    public UserPermission(String alias) {
        this(DSL.name(alias), USER_PERMISSION);
    }

    /**
     * Create an aliased <code>user_permission</code> table reference
     */
    public UserPermission(Name alias) {
        this(alias, USER_PERMISSION);
    }

    /**
     * Create a <code>user_permission</code> table reference
     */
    public UserPermission() {
        this(DSL.name("user_permission"), null);
    }

    public <O extends Record> UserPermission(Table<O> child, ForeignKey<O, UserPermissionRecord> key) {
        super(child, key, USER_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserPermissionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public List<UniqueKey<UserPermissionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.IDX_PERM_IDENTIFIER, Keys.IDX_PERM);
    }

    @Override
    public TableField<UserPermissionRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public UserPermission as(String alias) {
        return new UserPermission(DSL.name(alias), this);
    }

    @Override
    public UserPermission as(Name alias) {
        return new UserPermission(alias, this);
    }

    @Override
    public UserPermission as(Table<?> alias) {
        return new UserPermission(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPermission rename(String name) {
        return new UserPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPermission rename(Name name) {
        return new UserPermission(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPermission rename(Table<?> name) {
        return new UserPermission(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, String, Short, String, Boolean, String, LocalDateTime, String, LocalDateTime, Integer> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super String, ? super Short, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super String, ? super Short, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

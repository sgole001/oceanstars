/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import oceanstars.ecommerce.user.repository.generate.tables.UserRole;
import oceanstars.ecommerce.user.repository.generate.tables.pojos.UserRolePojo;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserRoleRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserRoleDao extends DAOImpl<UserRoleRecord, UserRolePojo, Long> {

    /**
     * Create a new UserRoleDao without any configuration
     */
    public UserRoleDao() {
        super(UserRole.USER_ROLE, UserRolePojo.class);
    }

    /**
     * Create a new UserRoleDao with an attached configuration
     */
    @Autowired
    public UserRoleDao(Configuration configuration) {
        super(UserRole.USER_ROLE, UserRolePojo.class, configuration);
    }

    @Override
    public Long getId(UserRolePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserRolePojo> fetchById(Long... values) {
        return fetch(UserRole.USER_ROLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserRolePojo fetchOneById(Long value) {
        return fetchOne(UserRole.USER_ROLE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UserRolePojo> fetchOptionalById(Long value) {
        return fetchOptional(UserRole.USER_ROLE.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<UserRolePojo> fetchByCode(String... values) {
        return fetch(UserRole.USER_ROLE.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public UserRolePojo fetchOneByCode(String value) {
        return fetchOne(UserRole.USER_ROLE.CODE, value);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public Optional<UserRolePojo> fetchOptionalByCode(String value) {
        return fetchOptional(UserRole.USER_ROLE.CODE, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UserRolePojo> fetchByName(String... values) {
        return fetch(UserRole.USER_ROLE.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public UserRolePojo fetchOneByName(String value) {
        return fetchOne(UserRole.USER_ROLE.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<UserRolePojo> fetchOptionalByName(String value) {
        return fetchOptional(UserRole.USER_ROLE.NAME, value);
    }

    /**
     * Fetch records that have <code>desc BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>desc IN (values)</code>
     */
    public List<UserRolePojo> fetchByDesc(String... values) {
        return fetch(UserRole.USER_ROLE.DESC, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<UserRolePojo> fetchByEnabled(Boolean... values) {
        return fetch(UserRole.USER_ROLE.ENABLED, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<UserRolePojo> fetchByCreateBy(String... values) {
        return fetch(UserRole.USER_ROLE.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<UserRolePojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(UserRole.USER_ROLE.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfUpdateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<UserRolePojo> fetchByUpdateBy(String... values) {
        return fetch(UserRole.USER_ROLE.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<UserRolePojo> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(UserRole.USER_ROLE.UPDATE_AT, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserRolePojo> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserRole.USER_ROLE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<UserRolePojo> fetchByVersion(Integer... values) {
        return fetch(UserRole.USER_ROLE.VERSION, values);
    }
}

/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import oceanstars.ecommerce.user.repository.generate.DefaultSchema;
import oceanstars.ecommerce.user.repository.generate.Indexes;
import oceanstars.ecommerce.user.repository.generate.Keys;
import oceanstars.ecommerce.user.repository.generate.tables.records.RelAccountRoleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelAccountRole extends TableImpl<RelAccountRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rel_account_role</code>
     */
    public static final RelAccountRole REL_ACCOUNT_ROLE = new RelAccountRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelAccountRoleRecord> getRecordType() {
        return RelAccountRoleRecord.class;
    }

    /**
     * The column <code>rel_account_role.id</code>.
     */
    public final TableField<RelAccountRoleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_account_role.aid</code>.
     */
    public final TableField<RelAccountRoleRecord, Long> AID = createField(DSL.name("aid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_account_role.rid</code>.
     */
    public final TableField<RelAccountRoleRecord, Long> RID = createField(DSL.name("rid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_account_role.create_by</code>.
     */
    public final TableField<RelAccountRoleRecord, String> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>rel_account_role.create_at</code>.
     */
    public final TableField<RelAccountRoleRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private RelAccountRole(Name alias, Table<RelAccountRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private RelAccountRole(Name alias, Table<RelAccountRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rel_account_role</code> table reference
     */
    public RelAccountRole(String alias) {
        this(DSL.name(alias), REL_ACCOUNT_ROLE);
    }

    /**
     * Create an aliased <code>rel_account_role</code> table reference
     */
    public RelAccountRole(Name alias) {
        this(alias, REL_ACCOUNT_ROLE);
    }

    /**
     * Create a <code>rel_account_role</code> table reference
     */
    public RelAccountRole() {
        this(DSL.name("rel_account_role"), null);
    }

    public <O extends Record> RelAccountRole(Table<O> child, ForeignKey<O, RelAccountRoleRecord> key) {
        super(child, key, REL_ACCOUNT_ROLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_REL_ACC_ROLE_AID, Indexes.IDX_REL_ACC_ROLE_RID);
    }

    @Override
    public UniqueKey<RelAccountRoleRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public List<UniqueKey<RelAccountRoleRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.IDX_REL_ACC_ROLE);
    }

    @Override
    public RelAccountRole as(String alias) {
        return new RelAccountRole(DSL.name(alias), this);
    }

    @Override
    public RelAccountRole as(Name alias) {
        return new RelAccountRole(alias, this);
    }

    @Override
    public RelAccountRole as(Table<?> alias) {
        return new RelAccountRole(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RelAccountRole rename(String name) {
        return new RelAccountRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelAccountRole rename(Name name) {
        return new RelAccountRole(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelAccountRole rename(Table<?> name) {
        return new RelAccountRole(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

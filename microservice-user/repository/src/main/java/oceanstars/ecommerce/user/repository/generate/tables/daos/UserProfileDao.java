/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import oceanstars.ecommerce.user.repository.generate.tables.UserProfile;
import oceanstars.ecommerce.user.repository.generate.tables.pojos.UserProfilePojo;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserProfileRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserProfileDao extends DAOImpl<UserProfileRecord, UserProfilePojo, Long> {

    /**
     * Create a new UserProfileDao without any configuration
     */
    public UserProfileDao() {
        super(UserProfile.USER_PROFILE, UserProfilePojo.class);
    }

    /**
     * Create a new UserProfileDao with an attached configuration
     */
    @Autowired
    public UserProfileDao(Configuration configuration) {
        super(UserProfile.USER_PROFILE, UserProfilePojo.class, configuration);
    }

    @Override
    public Long getId(UserProfilePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserProfilePojo> fetchById(Long... values) {
        return fetch(UserProfile.USER_PROFILE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserProfilePojo fetchOneById(Long value) {
        return fetchOne(UserProfile.USER_PROFILE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UserProfilePojo> fetchOptionalById(Long value) {
        return fetchOptional(UserProfile.USER_PROFILE.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<UserProfilePojo> fetchByCode(String... values) {
        return fetch(UserProfile.USER_PROFILE.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public UserProfilePojo fetchOneByCode(String value) {
        return fetchOne(UserProfile.USER_PROFILE.CODE, value);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public Optional<UserProfilePojo> fetchOptionalByCode(String value) {
        return fetchOptional(UserProfile.USER_PROFILE.CODE, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<UserProfilePojo> fetchByFirstName(String... values) {
        return fetch(UserProfile.USER_PROFILE.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<UserProfilePojo> fetchByLastName(String... values) {
        return fetch(UserProfile.USER_PROFILE.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>nick_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfNickName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.NICK_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nick_name IN (values)</code>
     */
    public List<UserProfilePojo> fetchByNickName(String... values) {
        return fetch(UserProfile.USER_PROFILE.NICK_NAME, values);
    }

    /**
     * Fetch records that have <code>avatar BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfAvatar(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.AVATAR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>avatar IN (values)</code>
     */
    public List<UserProfilePojo> fetchByAvatar(String... values) {
        return fetch(UserProfile.USER_PROFILE.AVATAR, values);
    }

    /**
     * Fetch records that have <code>gender BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfGender(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.GENDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<UserProfilePojo> fetchByGender(Short... values) {
        return fetch(UserProfile.USER_PROFILE.GENDER, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<UserProfilePojo> fetchByCreateBy(String... values) {
        return fetch(UserProfile.USER_PROFILE.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<UserProfilePojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(UserProfile.USER_PROFILE.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfUpdateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<UserProfilePojo> fetchByUpdateBy(String... values) {
        return fetch(UserProfile.USER_PROFILE.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<UserProfilePojo> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(UserProfile.USER_PROFILE.UPDATE_AT, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserProfilePojo> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserProfile.USER_PROFILE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<UserProfilePojo> fetchByVersion(Integer... values) {
        return fetch(UserProfile.USER_PROFILE.VERSION, values);
    }
}

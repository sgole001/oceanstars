/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import oceanstars.ecommerce.user.repository.generate.tables.UserResourceType;
import oceanstars.ecommerce.user.repository.generate.tables.pojos.UserResourceTypePojo;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserResourceTypeRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserResourceTypeDao extends DAOImpl<UserResourceTypeRecord, UserResourceTypePojo, Long> {

    /**
     * Create a new UserResourceTypeDao without any configuration
     */
    public UserResourceTypeDao() {
        super(UserResourceType.USER_RESOURCE_TYPE, UserResourceTypePojo.class);
    }

    /**
     * Create a new UserResourceTypeDao with an attached configuration
     */
    @Autowired
    public UserResourceTypeDao(Configuration configuration) {
        super(UserResourceType.USER_RESOURCE_TYPE, UserResourceTypePojo.class, configuration);
    }

    @Override
    public Long getId(UserResourceTypePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchById(Long... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserResourceTypePojo fetchOneById(Long value) {
        return fetchOne(UserResourceType.USER_RESOURCE_TYPE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UserResourceTypePojo> fetchOptionalById(Long value) {
        return fetchOptional(UserResourceType.USER_RESOURCE_TYPE.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByCode(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public UserResourceTypePojo fetchOneByCode(String value) {
        return fetchOne(UserResourceType.USER_RESOURCE_TYPE.CODE, value);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public Optional<UserResourceTypePojo> fetchOptionalByCode(String value) {
        return fetchOptional(UserResourceType.USER_RESOURCE_TYPE.CODE, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByName(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public UserResourceTypePojo fetchOneByName(String value) {
        return fetchOne(UserResourceType.USER_RESOURCE_TYPE.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<UserResourceTypePojo> fetchOptionalByName(String value) {
        return fetchOptional(UserResourceType.USER_RESOURCE_TYPE.NAME, value);
    }

    /**
     * Fetch records that have <code>desc BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>desc IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByDesc(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.DESC, values);
    }

    /**
     * Fetch records that have <code>href BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfHref(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.HREF, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>href IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByHref(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.HREF, values);
    }

    /**
     * Fetch records that have <code>method BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfMethod(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.METHOD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>method IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByMethod(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.METHOD, values);
    }

    /**
     * Fetch records that have <code>body BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfBody(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.BODY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>body IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByBody(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.BODY, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByEnabled(Boolean... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.ENABLED, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByCreateBy(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfUpdateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByUpdateBy(String... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.UPDATE_AT, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserResourceTypePojo> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserResourceType.USER_RESOURCE_TYPE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<UserResourceTypePojo> fetchByVersion(Integer... values) {
        return fetch(UserResourceType.USER_RESOURCE_TYPE.VERSION, values);
    }
}

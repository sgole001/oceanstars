/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import oceanstars.ecommerce.user.repository.generate.DefaultSchema;
import oceanstars.ecommerce.user.repository.generate.Indexes;
import oceanstars.ecommerce.user.repository.generate.Keys;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserAccountRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAccount extends TableImpl<UserAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_account</code>
     */
    public static final UserAccount USER_ACCOUNT = new UserAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAccountRecord> getRecordType() {
        return UserAccountRecord.class;
    }

    /**
     * The column <code>user_account.id</code>.
     */
    public final TableField<UserAccountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>user_account.code</code>.
     */
    public final TableField<UserAccountRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>user_account.source</code>.
     */
    public final TableField<UserAccountRecord, Short> SOURCE = createField(DSL.name("source"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>user_account.means</code>.
     */
    public final TableField<UserAccountRecord, Short> MEANS = createField(DSL.name("means"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>user_account.email</code>.
     */
    public final TableField<UserAccountRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>user_account.mobile</code>.
     */
    public final TableField<UserAccountRecord, String> MOBILE = createField(DSL.name("mobile"), SQLDataType.VARCHAR(11).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>user_account.password</code>.
     */
    public final TableField<UserAccountRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>user_account.external_id</code>.
     */
    public final TableField<UserAccountRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.VARCHAR(50).nullable(false).defaultValue(DSL.field("''", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>user_account.creat_ip</code>.
     */
    public final TableField<UserAccountRecord, String> CREAT_IP = createField(DSL.name("creat_ip"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>user_account.last_login_ip</code>.
     */
    public final TableField<UserAccountRecord, String> LAST_LOGIN_IP = createField(DSL.name("last_login_ip"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>user_account.login_times</code>.
     */
    public final TableField<UserAccountRecord, Integer> LOGIN_TIMES = createField(DSL.name("login_times"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>user_account.status</code>.
     */
    public final TableField<UserAccountRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>user_account.create_by</code>.
     */
    public final TableField<UserAccountRecord, String> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_account.create_at</code>.
     */
    public final TableField<UserAccountRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>user_account.update_by</code>.
     */
    public final TableField<UserAccountRecord, String> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_account.update_at</code>.
     */
    public final TableField<UserAccountRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>user_account.version</code>.
     */
    public final TableField<UserAccountRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    private UserAccount(Name alias, Table<UserAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAccount(Name alias, Table<UserAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_account</code> table reference
     */
    public UserAccount(String alias) {
        this(DSL.name(alias), USER_ACCOUNT);
    }

    /**
     * Create an aliased <code>user_account</code> table reference
     */
    public UserAccount(Name alias) {
        this(alias, USER_ACCOUNT);
    }

    /**
     * Create a <code>user_account</code> table reference
     */
    public UserAccount() {
        this(DSL.name("user_account"), null);
    }

    public <O extends Record> UserAccount(Table<O> child, ForeignKey<O, UserAccountRecord> key) {
        super(child, key, USER_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CREAT_IP, Indexes.IDX_EMAIL, Indexes.IDX_EXTERNAL_ID, Indexes.IDX_LAST_LOGIN_IP, Indexes.IDX_LOGIN_TIMES, Indexes.IDX_MOBILE, Indexes.IDX_SOURCE, Indexes.IDX_STATUS);
    }

    @Override
    public UniqueKey<UserAccountRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public List<UniqueKey<UserAccountRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.IDX_ACCOUNT_IDENTIFIER, Keys.IDX_REGISTER);
    }

    @Override
    public TableField<UserAccountRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public UserAccount as(String alias) {
        return new UserAccount(DSL.name(alias), this);
    }

    @Override
    public UserAccount as(Name alias) {
        return new UserAccount(alias, this);
    }

    @Override
    public UserAccount as(Table<?> alias) {
        return new UserAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(String name) {
        return new UserAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(Name name) {
        return new UserAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccount rename(Table<?> name) {
        return new UserAccount(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, String, Short, Short, String, String, String, String, String, String, Integer, Short, String, LocalDateTime, String, LocalDateTime, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super Long, ? super String, ? super Short, ? super Short, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Short, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super Long, ? super String, ? super Short, ? super Short, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super Short, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import oceanstars.ecommerce.user.repository.generate.DefaultSchema;
import oceanstars.ecommerce.user.repository.generate.Keys;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserResourceTypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserResourceType extends TableImpl<UserResourceTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_resource_type</code>
     */
    public static final UserResourceType USER_RESOURCE_TYPE = new UserResourceType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserResourceTypeRecord> getRecordType() {
        return UserResourceTypeRecord.class;
    }

    /**
     * The column <code>user_resource_type.id</code>.
     */
    public final TableField<UserResourceTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>user_resource_type.code</code>.
     */
    public final TableField<UserResourceTypeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.name</code>.
     */
    public final TableField<UserResourceTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.desc</code>.
     */
    public final TableField<UserResourceTypeRecord, String> DESC = createField(DSL.name("desc"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>user_resource_type.href</code>.
     */
    public final TableField<UserResourceTypeRecord, String> HREF = createField(DSL.name("href"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.method</code>.
     */
    public final TableField<UserResourceTypeRecord, String> METHOD = createField(DSL.name("method"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.body</code>.
     */
    public final TableField<UserResourceTypeRecord, String> BODY = createField(DSL.name("body"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_resource_type.enabled</code>.
     */
    public final TableField<UserResourceTypeRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("1", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>user_resource_type.create_by</code>.
     */
    public final TableField<UserResourceTypeRecord, String> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.create_at</code>.
     */
    public final TableField<UserResourceTypeRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.update_by</code>.
     */
    public final TableField<UserResourceTypeRecord, String> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.update_at</code>.
     */
    public final TableField<UserResourceTypeRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>user_resource_type.version</code>.
     */
    public final TableField<UserResourceTypeRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "");

    private UserResourceType(Name alias, Table<UserResourceTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserResourceType(Name alias, Table<UserResourceTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_resource_type</code> table reference
     */
    public UserResourceType(String alias) {
        this(DSL.name(alias), USER_RESOURCE_TYPE);
    }

    /**
     * Create an aliased <code>user_resource_type</code> table reference
     */
    public UserResourceType(Name alias) {
        this(alias, USER_RESOURCE_TYPE);
    }

    /**
     * Create a <code>user_resource_type</code> table reference
     */
    public UserResourceType() {
        this(DSL.name("user_resource_type"), null);
    }

    public <O extends Record> UserResourceType(Table<O> child, ForeignKey<O, UserResourceTypeRecord> key) {
        super(child, key, USER_RESOURCE_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserResourceTypeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<UniqueKey<UserResourceTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.IDX_RES_IDENTIFIER, Keys.IDX_RES);
    }

    @Override
    public TableField<UserResourceTypeRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public UserResourceType as(String alias) {
        return new UserResourceType(DSL.name(alias), this);
    }

    @Override
    public UserResourceType as(Name alias) {
        return new UserResourceType(alias, this);
    }

    @Override
    public UserResourceType as(Table<?> alias) {
        return new UserResourceType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserResourceType rename(String name) {
        return new UserResourceType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserResourceType rename(Name name) {
        return new UserResourceType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserResourceType rename(Table<?> name) {
        return new UserResourceType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Long, String, String, String, String, String, String, Boolean, String, LocalDateTime, String, LocalDateTime, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super String, ? super LocalDateTime, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

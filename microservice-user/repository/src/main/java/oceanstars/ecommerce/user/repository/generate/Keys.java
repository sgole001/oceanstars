/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate;


import oceanstars.ecommerce.user.repository.generate.tables.RelAccountRole;
import oceanstars.ecommerce.user.repository.generate.tables.RelPermissionResource;
import oceanstars.ecommerce.user.repository.generate.tables.RelRolePermission;
import oceanstars.ecommerce.user.repository.generate.tables.RelRoleRole;
import oceanstars.ecommerce.user.repository.generate.tables.UserAccount;
import oceanstars.ecommerce.user.repository.generate.tables.UserPermission;
import oceanstars.ecommerce.user.repository.generate.tables.UserPermissionOperation;
import oceanstars.ecommerce.user.repository.generate.tables.UserProfile;
import oceanstars.ecommerce.user.repository.generate.tables.UserResourceType;
import oceanstars.ecommerce.user.repository.generate.tables.UserRole;
import oceanstars.ecommerce.user.repository.generate.tables.records.RelAccountRoleRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.RelPermissionResourceRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.RelRolePermissionRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.RelRoleRoleRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserAccountRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserPermissionOperationRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserPermissionRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserProfileRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserResourceTypeRecord;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserRoleRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<RelAccountRoleRecord> CONSTRAINT_F = Internal.createUniqueKey(RelAccountRole.REL_ACCOUNT_ROLE, DSL.name("CONSTRAINT_F"), new TableField[] { RelAccountRole.REL_ACCOUNT_ROLE.ID }, true);
    public static final UniqueKey<RelAccountRoleRecord> IDX_REL_ACC_ROLE = Internal.createUniqueKey(RelAccountRole.REL_ACCOUNT_ROLE, DSL.name("idx_rel_acc_role"), new TableField[] { RelAccountRole.REL_ACCOUNT_ROLE.AID, RelAccountRole.REL_ACCOUNT_ROLE.RID }, true);
    public static final UniqueKey<RelPermissionResourceRecord> CONSTRAINT_F7 = Internal.createUniqueKey(RelPermissionResource.REL_PERMISSION_RESOURCE, DSL.name("CONSTRAINT_F7"), new TableField[] { RelPermissionResource.REL_PERMISSION_RESOURCE.ID }, true);
    public static final UniqueKey<RelPermissionResourceRecord> IDX_REL_PERM_RES_OPS = Internal.createUniqueKey(RelPermissionResource.REL_PERMISSION_RESOURCE, DSL.name("idx_rel_perm_res_ops"), new TableField[] { RelPermissionResource.REL_PERMISSION_RESOURCE.PID, RelPermissionResource.REL_PERMISSION_RESOURCE.RID, RelPermissionResource.REL_PERMISSION_RESOURCE.TID, RelPermissionResource.REL_PERMISSION_RESOURCE.OID }, true);
    public static final UniqueKey<RelRolePermissionRecord> CONSTRAINT_9 = Internal.createUniqueKey(RelRolePermission.REL_ROLE_PERMISSION, DSL.name("CONSTRAINT_9"), new TableField[] { RelRolePermission.REL_ROLE_PERMISSION.ID }, true);
    public static final UniqueKey<RelRolePermissionRecord> IDX_REL_ROLE_PERM = Internal.createUniqueKey(RelRolePermission.REL_ROLE_PERMISSION, DSL.name("idx_rel_role_perm"), new TableField[] { RelRolePermission.REL_ROLE_PERMISSION.RID, RelRolePermission.REL_ROLE_PERMISSION.PID }, true);
    public static final UniqueKey<RelRoleRoleRecord> CONSTRAINT_C = Internal.createUniqueKey(RelRoleRole.REL_ROLE_ROLE, DSL.name("CONSTRAINT_C"), new TableField[] { RelRoleRole.REL_ROLE_ROLE.ID }, true);
    public static final UniqueKey<RelRoleRoleRecord> IDX_REL_ROLE = Internal.createUniqueKey(RelRoleRole.REL_ROLE_ROLE, DSL.name("idx_rel_role"), new TableField[] { RelRoleRole.REL_ROLE_ROLE.RID, RelRoleRole.REL_ROLE_ROLE.PID }, true);
    public static final UniqueKey<UserAccountRecord> CONSTRAINT_1 = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("CONSTRAINT_1"), new TableField[] { UserAccount.USER_ACCOUNT.ID }, true);
    public static final UniqueKey<UserAccountRecord> IDX_ACCOUNT_IDENTIFIER = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("idx_account_identifier"), new TableField[] { UserAccount.USER_ACCOUNT.CODE }, true);
    public static final UniqueKey<UserAccountRecord> IDX_REGISTER = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("idx_register"), new TableField[] { UserAccount.USER_ACCOUNT.SOURCE, UserAccount.USER_ACCOUNT.MEANS, UserAccount.USER_ACCOUNT.EMAIL, UserAccount.USER_ACCOUNT.MOBILE, UserAccount.USER_ACCOUNT.EXTERNAL_ID }, true);
    public static final UniqueKey<UserPermissionRecord> CONSTRAINT_3 = Internal.createUniqueKey(UserPermission.USER_PERMISSION, DSL.name("CONSTRAINT_3"), new TableField[] { UserPermission.USER_PERMISSION.ID }, true);
    public static final UniqueKey<UserPermissionRecord> IDX_PERM = Internal.createUniqueKey(UserPermission.USER_PERMISSION, DSL.name("idx_perm"), new TableField[] { UserPermission.USER_PERMISSION.NAME, UserPermission.USER_PERMISSION.TYPE }, true);
    public static final UniqueKey<UserPermissionRecord> IDX_PERM_IDENTIFIER = Internal.createUniqueKey(UserPermission.USER_PERMISSION, DSL.name("idx_perm_identifier"), new TableField[] { UserPermission.USER_PERMISSION.CODE }, true);
    public static final UniqueKey<UserPermissionOperationRecord> CONSTRAINT_5 = Internal.createUniqueKey(UserPermissionOperation.USER_PERMISSION_OPERATION, DSL.name("CONSTRAINT_5"), new TableField[] { UserPermissionOperation.USER_PERMISSION_OPERATION.ID }, true);
    public static final UniqueKey<UserPermissionOperationRecord> IDX_OPERATION = Internal.createUniqueKey(UserPermissionOperation.USER_PERMISSION_OPERATION, DSL.name("idx_operation"), new TableField[] { UserPermissionOperation.USER_PERMISSION_OPERATION.BEHAVIOR }, true);
    public static final UniqueKey<UserPermissionOperationRecord> IDX_OPT_IDENTIFIER = Internal.createUniqueKey(UserPermissionOperation.USER_PERMISSION_OPERATION, DSL.name("idx_opt_identifier"), new TableField[] { UserPermissionOperation.USER_PERMISSION_OPERATION.CODE }, true);
    public static final UniqueKey<UserProfileRecord> CONSTRAINT_4 = Internal.createUniqueKey(UserProfile.USER_PROFILE, DSL.name("CONSTRAINT_4"), new TableField[] { UserProfile.USER_PROFILE.ID }, true);
    public static final UniqueKey<UserProfileRecord> IDX_PROFILE_IDENTIFIER = Internal.createUniqueKey(UserProfile.USER_PROFILE, DSL.name("idx_profile_identifier"), new TableField[] { UserProfile.USER_PROFILE.CODE }, true);
    public static final UniqueKey<UserResourceTypeRecord> CONSTRAINT_2 = Internal.createUniqueKey(UserResourceType.USER_RESOURCE_TYPE, DSL.name("CONSTRAINT_2"), new TableField[] { UserResourceType.USER_RESOURCE_TYPE.ID }, true);
    public static final UniqueKey<UserResourceTypeRecord> IDX_RES = Internal.createUniqueKey(UserResourceType.USER_RESOURCE_TYPE, DSL.name("idx_res"), new TableField[] { UserResourceType.USER_RESOURCE_TYPE.NAME }, true);
    public static final UniqueKey<UserResourceTypeRecord> IDX_RES_IDENTIFIER = Internal.createUniqueKey(UserResourceType.USER_RESOURCE_TYPE, DSL.name("idx_res_identifier"), new TableField[] { UserResourceType.USER_RESOURCE_TYPE.CODE }, true);
    public static final UniqueKey<UserRoleRecord> CONSTRAINT_14 = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("CONSTRAINT_14"), new TableField[] { UserRole.USER_ROLE.ID }, true);
    public static final UniqueKey<UserRoleRecord> IDX_ROLE = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("idx_role"), new TableField[] { UserRole.USER_ROLE.NAME }, true);
    public static final UniqueKey<UserRoleRecord> IDX_ROLE_IDENTIFIER = Internal.createUniqueKey(UserRole.USER_ROLE, DSL.name("idx_role_identifier"), new TableField[] { UserRole.USER_ROLE.CODE }, true);
}

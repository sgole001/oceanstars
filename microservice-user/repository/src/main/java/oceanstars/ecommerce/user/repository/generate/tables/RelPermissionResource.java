/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import oceanstars.ecommerce.user.repository.generate.DefaultSchema;
import oceanstars.ecommerce.user.repository.generate.Indexes;
import oceanstars.ecommerce.user.repository.generate.Keys;
import oceanstars.ecommerce.user.repository.generate.tables.records.RelPermissionResourceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelPermissionResource extends TableImpl<RelPermissionResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rel_permission_resource</code>
     */
    public static final RelPermissionResource REL_PERMISSION_RESOURCE = new RelPermissionResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelPermissionResourceRecord> getRecordType() {
        return RelPermissionResourceRecord.class;
    }

    /**
     * The column <code>rel_permission_resource.id</code>.
     */
    public final TableField<RelPermissionResourceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_permission_resource.pid</code>.
     */
    public final TableField<RelPermissionResourceRecord, Long> PID = createField(DSL.name("pid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_permission_resource.rid</code>.
     */
    public final TableField<RelPermissionResourceRecord, Long> RID = createField(DSL.name("rid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_permission_resource.tid</code>.
     */
    public final TableField<RelPermissionResourceRecord, Long> TID = createField(DSL.name("tid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_permission_resource.oid</code>.
     */
    public final TableField<RelPermissionResourceRecord, Long> OID = createField(DSL.name("oid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>rel_permission_resource.create_by</code>.
     */
    public final TableField<RelPermissionResourceRecord, String> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>rel_permission_resource.create_at</code>.
     */
    public final TableField<RelPermissionResourceRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private RelPermissionResource(Name alias, Table<RelPermissionResourceRecord> aliased) {
        this(alias, aliased, null);
    }

    private RelPermissionResource(Name alias, Table<RelPermissionResourceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rel_permission_resource</code> table reference
     */
    public RelPermissionResource(String alias) {
        this(DSL.name(alias), REL_PERMISSION_RESOURCE);
    }

    /**
     * Create an aliased <code>rel_permission_resource</code> table reference
     */
    public RelPermissionResource(Name alias) {
        this(alias, REL_PERMISSION_RESOURCE);
    }

    /**
     * Create a <code>rel_permission_resource</code> table reference
     */
    public RelPermissionResource() {
        this(DSL.name("rel_permission_resource"), null);
    }

    public <O extends Record> RelPermissionResource(Table<O> child, ForeignKey<O, RelPermissionResourceRecord> key) {
        super(child, key, REL_PERMISSION_RESOURCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_REL_PERM_RES_OPS_OID, Indexes.IDX_REL_PERM_RES_OPS_PID, Indexes.IDX_REL_PERM_RES_OPS_RID, Indexes.IDX_REL_PERM_RES_OPS_TID);
    }

    @Override
    public UniqueKey<RelPermissionResourceRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F7;
    }

    @Override
    public List<UniqueKey<RelPermissionResourceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.IDX_REL_PERM_RES_OPS);
    }

    @Override
    public RelPermissionResource as(String alias) {
        return new RelPermissionResource(DSL.name(alias), this);
    }

    @Override
    public RelPermissionResource as(Name alias) {
        return new RelPermissionResource(alias, this);
    }

    @Override
    public RelPermissionResource as(Table<?> alias) {
        return new RelPermissionResource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RelPermissionResource rename(String name) {
        return new RelPermissionResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelPermissionResource rename(Name name) {
        return new RelPermissionResource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelPermissionResource rename(Table<?> name) {
        return new RelPermissionResource(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Long, Long, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import oceanstars.ecommerce.user.repository.generate.tables.UserAccount;
import oceanstars.ecommerce.user.repository.generate.tables.pojos.UserAccountPojo;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserAccountRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserAccountDao extends DAOImpl<UserAccountRecord, UserAccountPojo, Long> {

    /**
     * Create a new UserAccountDao without any configuration
     */
    public UserAccountDao() {
        super(UserAccount.USER_ACCOUNT, UserAccountPojo.class);
    }

    /**
     * Create a new UserAccountDao with an attached configuration
     */
    @Autowired
    public UserAccountDao(Configuration configuration) {
        super(UserAccount.USER_ACCOUNT, UserAccountPojo.class, configuration);
    }

    @Override
    public Long getId(UserAccountPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserAccountPojo> fetchById(Long... values) {
        return fetch(UserAccount.USER_ACCOUNT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserAccountPojo fetchOneById(Long value) {
        return fetchOne(UserAccount.USER_ACCOUNT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UserAccountPojo> fetchOptionalById(Long value) {
        return fetchOptional(UserAccount.USER_ACCOUNT.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<UserAccountPojo> fetchByCode(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public UserAccountPojo fetchOneByCode(String value) {
        return fetchOne(UserAccount.USER_ACCOUNT.CODE, value);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public Optional<UserAccountPojo> fetchOptionalByCode(String value) {
        return fetchOptional(UserAccount.USER_ACCOUNT.CODE, value);
    }

    /**
     * Fetch records that have <code>source BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfSource(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.SOURCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source IN (values)</code>
     */
    public List<UserAccountPojo> fetchBySource(Short... values) {
        return fetch(UserAccount.USER_ACCOUNT.SOURCE, values);
    }

    /**
     * Fetch records that have <code>means BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfMeans(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.MEANS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>means IN (values)</code>
     */
    public List<UserAccountPojo> fetchByMeans(Short... values) {
        return fetch(UserAccount.USER_ACCOUNT.MEANS, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<UserAccountPojo> fetchByEmail(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.EMAIL, values);
    }

    /**
     * Fetch records that have <code>mobile BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfMobile(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.MOBILE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mobile IN (values)</code>
     */
    public List<UserAccountPojo> fetchByMobile(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.MOBILE, values);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<UserAccountPojo> fetchByPassword(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>external_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfExternalId(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.EXTERNAL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>external_id IN (values)</code>
     */
    public List<UserAccountPojo> fetchByExternalId(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.EXTERNAL_ID, values);
    }

    /**
     * Fetch records that have <code>creat_ip BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfCreatIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.CREAT_IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creat_ip IN (values)</code>
     */
    public List<UserAccountPojo> fetchByCreatIp(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.CREAT_IP, values);
    }

    /**
     * Fetch records that have <code>last_login_ip BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfLastLoginIp(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.LAST_LOGIN_IP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_login_ip IN (values)</code>
     */
    public List<UserAccountPojo> fetchByLastLoginIp(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.LAST_LOGIN_IP, values);
    }

    /**
     * Fetch records that have <code>login_times BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfLoginTimes(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.LOGIN_TIMES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>login_times IN (values)</code>
     */
    public List<UserAccountPojo> fetchByLoginTimes(Integer... values) {
        return fetch(UserAccount.USER_ACCOUNT.LOGIN_TIMES, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfStatus(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<UserAccountPojo> fetchByStatus(Short... values) {
        return fetch(UserAccount.USER_ACCOUNT.STATUS, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<UserAccountPojo> fetchByCreateBy(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<UserAccountPojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(UserAccount.USER_ACCOUNT.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfUpdateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<UserAccountPojo> fetchByUpdateBy(String... values) {
        return fetch(UserAccount.USER_ACCOUNT.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<UserAccountPojo> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(UserAccount.USER_ACCOUNT.UPDATE_AT, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserAccountPojo> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserAccount.USER_ACCOUNT.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<UserAccountPojo> fetchByVersion(Integer... values) {
        return fetch(UserAccount.USER_ACCOUNT.VERSION, values);
    }
}

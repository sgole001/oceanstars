/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.user.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import oceanstars.ecommerce.user.repository.generate.tables.UserPermission;
import oceanstars.ecommerce.user.repository.generate.tables.pojos.UserPermissionPojo;
import oceanstars.ecommerce.user.repository.generate.tables.records.UserPermissionRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserPermissionDao extends DAOImpl<UserPermissionRecord, UserPermissionPojo, Long> {

    /**
     * Create a new UserPermissionDao without any configuration
     */
    public UserPermissionDao() {
        super(UserPermission.USER_PERMISSION, UserPermissionPojo.class);
    }

    /**
     * Create a new UserPermissionDao with an attached configuration
     */
    @Autowired
    public UserPermissionDao(Configuration configuration) {
        super(UserPermission.USER_PERMISSION, UserPermissionPojo.class, configuration);
    }

    @Override
    public Long getId(UserPermissionPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<UserPermissionPojo> fetchById(Long... values) {
        return fetch(UserPermission.USER_PERMISSION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public UserPermissionPojo fetchOneById(Long value) {
        return fetchOne(UserPermission.USER_PERMISSION.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<UserPermissionPojo> fetchOptionalById(Long value) {
        return fetchOptional(UserPermission.USER_PERMISSION.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByCode(String... values) {
        return fetch(UserPermission.USER_PERMISSION.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public UserPermissionPojo fetchOneByCode(String value) {
        return fetchOne(UserPermission.USER_PERMISSION.CODE, value);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public Optional<UserPermissionPojo> fetchOptionalByCode(String value) {
        return fetchOptional(UserPermission.USER_PERMISSION.CODE, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByName(String... values) {
        return fetch(UserPermission.USER_PERMISSION.NAME, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfType(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByType(Short... values) {
        return fetch(UserPermission.USER_PERMISSION.TYPE, values);
    }

    /**
     * Fetch records that have <code>desc BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfDesc(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.DESC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>desc IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByDesc(String... values) {
        return fetch(UserPermission.USER_PERMISSION.DESC, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByEnabled(Boolean... values) {
        return fetch(UserPermission.USER_PERMISSION.ENABLED, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByCreateBy(String... values) {
        return fetch(UserPermission.USER_PERMISSION.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(UserPermission.USER_PERMISSION.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfUpdateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByUpdateBy(String... values) {
        return fetch(UserPermission.USER_PERMISSION.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(UserPermission.USER_PERMISSION.UPDATE_AT, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<UserPermissionPojo> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserPermission.USER_PERMISSION.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<UserPermissionPojo> fetchByVersion(Integer... values) {
        return fetch(UserPermission.USER_PERMISSION.VERSION, values);
    }
}

/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.integration.repository.generate.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import oceanstars.ecommerce.integration.repository.generate.DefaultSchema;
import oceanstars.ecommerce.integration.repository.generate.Keys;
import oceanstars.ecommerce.integration.repository.generate.tables.records.IntegrationGatewayRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IntegrationGateway extends TableImpl<IntegrationGatewayRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>integration_gateway</code>
     */
    public static final IntegrationGateway INTEGRATION_GATEWAY = new IntegrationGateway();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IntegrationGatewayRecord> getRecordType() {
        return IntegrationGatewayRecord.class;
    }

    /**
     * The column <code>integration_gateway.id</code>.
     */
    public final TableField<IntegrationGatewayRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>integration_gateway.code</code>.
     */
    public final TableField<IntegrationGatewayRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(14).nullable(false), this, "");

    /**
     * The column <code>integration_gateway.system</code>.
     */
    public final TableField<IntegrationGatewayRecord, Short> SYSTEM = createField(DSL.name("system"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>integration_gateway.description</code>.
     */
    public final TableField<IntegrationGatewayRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>integration_gateway.create_by</code>.
     */
    public final TableField<IntegrationGatewayRecord, String> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>integration_gateway.create_at</code>.
     */
    public final TableField<IntegrationGatewayRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>integration_gateway.update_by</code>.
     */
    public final TableField<IntegrationGatewayRecord, String> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>integration_gateway.update_at</code>.
     */
    public final TableField<IntegrationGatewayRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>integration_gateway.version</code>.
     */
    public final TableField<IntegrationGatewayRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private IntegrationGateway(Name alias, Table<IntegrationGatewayRecord> aliased) {
        this(alias, aliased, null);
    }

    private IntegrationGateway(Name alias, Table<IntegrationGatewayRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>integration_gateway</code> table reference
     */
    public IntegrationGateway(String alias) {
        this(DSL.name(alias), INTEGRATION_GATEWAY);
    }

    /**
     * Create an aliased <code>integration_gateway</code> table reference
     */
    public IntegrationGateway(Name alias) {
        this(alias, INTEGRATION_GATEWAY);
    }

    /**
     * Create a <code>integration_gateway</code> table reference
     */
    public IntegrationGateway() {
        this(DSL.name("integration_gateway"), null);
    }

    public <O extends Record> IntegrationGateway(Table<O> child, ForeignKey<O, IntegrationGatewayRecord> key) {
        super(child, key, INTEGRATION_GATEWAY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<IntegrationGatewayRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<UniqueKey<IntegrationGatewayRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_29, Keys.CONSTRAINT_299);
    }

    @Override
    public TableField<IntegrationGatewayRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public IntegrationGateway as(String alias) {
        return new IntegrationGateway(DSL.name(alias), this);
    }

    @Override
    public IntegrationGateway as(Name alias) {
        return new IntegrationGateway(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IntegrationGateway rename(String name) {
        return new IntegrationGateway(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IntegrationGateway rename(Name name) {
        return new IntegrationGateway(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Short, String, String, LocalDateTime, String, LocalDateTime, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}

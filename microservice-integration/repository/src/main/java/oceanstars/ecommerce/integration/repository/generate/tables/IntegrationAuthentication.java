/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.integration.repository.generate.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import oceanstars.ecommerce.integration.repository.generate.DefaultSchema;
import oceanstars.ecommerce.integration.repository.generate.Indexes;
import oceanstars.ecommerce.integration.repository.generate.Keys;
import oceanstars.ecommerce.integration.repository.generate.tables.records.IntegrationAuthenticationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IntegrationAuthentication extends TableImpl<IntegrationAuthenticationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>integration_authentication</code>
     */
    public static final IntegrationAuthentication INTEGRATION_AUTHENTICATION = new IntegrationAuthentication();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IntegrationAuthenticationRecord> getRecordType() {
        return IntegrationAuthenticationRecord.class;
    }

    /**
     * The column <code>integration_authentication.id</code>.
     */
    public final TableField<IntegrationAuthenticationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>integration_authentication.appKey</code>.
     */
    public final TableField<IntegrationAuthenticationRecord, String> APPKEY = createField(DSL.name("appKey"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>integration_authentication.appSecret</code>.
     */
    public final TableField<IntegrationAuthenticationRecord, String> APPSECRET = createField(DSL.name("appSecret"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>integration_authentication.x509Certificate</code>.
     */
    public final TableField<IntegrationAuthenticationRecord, byte[]> X509CERTIFICATE = createField(DSL.name("x509Certificate"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>integration_authentication.create_by</code>.
     */
    public final TableField<IntegrationAuthenticationRecord, String> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>integration_authentication.create_at</code>.
     */
    public final TableField<IntegrationAuthenticationRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private IntegrationAuthentication(Name alias, Table<IntegrationAuthenticationRecord> aliased) {
        this(alias, aliased, null);
    }

    private IntegrationAuthentication(Name alias, Table<IntegrationAuthenticationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>integration_authentication</code> table reference
     */
    public IntegrationAuthentication(String alias) {
        this(DSL.name(alias), INTEGRATION_AUTHENTICATION);
    }

    /**
     * Create an aliased <code>integration_authentication</code> table reference
     */
    public IntegrationAuthentication(Name alias) {
        this(alias, INTEGRATION_AUTHENTICATION);
    }

    /**
     * Create a <code>integration_authentication</code> table reference
     */
    public IntegrationAuthentication() {
        this(DSL.name("integration_authentication"), null);
    }

    public <O extends Record> IntegrationAuthentication(Table<O> child, ForeignKey<O, IntegrationAuthenticationRecord> key) {
        super(child, key, INTEGRATION_AUTHENTICATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_APPKEY);
    }

    @Override
    public UniqueKey<IntegrationAuthenticationRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_AE;
    }

    @Override
    public IntegrationAuthentication as(String alias) {
        return new IntegrationAuthentication(DSL.name(alias), this);
    }

    @Override
    public IntegrationAuthentication as(Name alias) {
        return new IntegrationAuthentication(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IntegrationAuthentication rename(String name) {
        return new IntegrationAuthentication(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IntegrationAuthentication rename(Name name) {
        return new IntegrationAuthentication(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, String, byte[], String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.integration.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import oceanstars.ecommerce.integration.repository.generate.tables.IntegrationService;
import oceanstars.ecommerce.integration.repository.generate.tables.pojos.IntegrationServicePojo;
import oceanstars.ecommerce.integration.repository.generate.tables.records.IntegrationServiceRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class IntegrationServiceDao extends DAOImpl<IntegrationServiceRecord, IntegrationServicePojo, Long> {

    /**
     * Create a new IntegrationServiceDao without any configuration
     */
    public IntegrationServiceDao() {
        super(IntegrationService.INTEGRATION_SERVICE, IntegrationServicePojo.class);
    }

    /**
     * Create a new IntegrationServiceDao with an attached configuration
     */
    @Autowired
    public IntegrationServiceDao(Configuration configuration) {
        super(IntegrationService.INTEGRATION_SERVICE, IntegrationServicePojo.class, configuration);
    }

    @Override
    public Long getId(IntegrationServicePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchById(Long... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public IntegrationServicePojo fetchOneById(Long value) {
        return fetchOne(IntegrationService.INTEGRATION_SERVICE.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByCode(String... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public IntegrationServicePojo fetchOneByCode(String value) {
        return fetchOne(IntegrationService.INTEGRATION_SERVICE.CODE, value);
    }

    /**
     * Fetch records that have <code>endpoint BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfEndpoint(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.ENDPOINT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>endpoint IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByEndpoint(String... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.ENDPOINT, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfType(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByType(Short... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.TYPE, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByName(String... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.NAME, values);
    }

    /**
     * Fetch records that have <code>retries BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfRetries(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.RETRIES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>retries IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByRetries(Short... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.RETRIES, values);
    }

    /**
     * Fetch records that have <code>connectTimeout BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfConnecttimeout(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.CONNECTTIMEOUT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>connectTimeout IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByConnecttimeout(Integer... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.CONNECTTIMEOUT, values);
    }

    /**
     * Fetch records that have <code>authentication BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfAuthentication(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.AUTHENTICATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>authentication IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByAuthentication(Long... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.AUTHENTICATION, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByCreateBy(String... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfUpdateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByUpdateBy(String... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.UPDATE_AT, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationServicePojo> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IntegrationService.INTEGRATION_SERVICE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<IntegrationServicePojo> fetchByVersion(Integer... values) {
        return fetch(IntegrationService.INTEGRATION_SERVICE.VERSION, values);
    }
}

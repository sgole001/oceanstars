/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.integration.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import oceanstars.ecommerce.integration.repository.generate.tables.IntegrationAuthentication;
import oceanstars.ecommerce.integration.repository.generate.tables.pojos.IntegrationAuthenticationPojo;
import oceanstars.ecommerce.integration.repository.generate.tables.records.IntegrationAuthenticationRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class IntegrationAuthenticationDao extends DAOImpl<IntegrationAuthenticationRecord, IntegrationAuthenticationPojo, Long> {

    /**
     * Create a new IntegrationAuthenticationDao without any configuration
     */
    public IntegrationAuthenticationDao() {
        super(IntegrationAuthentication.INTEGRATION_AUTHENTICATION, IntegrationAuthenticationPojo.class);
    }

    /**
     * Create a new IntegrationAuthenticationDao with an attached configuration
     */
    @Autowired
    public IntegrationAuthenticationDao(Configuration configuration) {
        super(IntegrationAuthentication.INTEGRATION_AUTHENTICATION, IntegrationAuthenticationPojo.class, configuration);
    }

    @Override
    public Long getId(IntegrationAuthenticationPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationAuthenticationPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<IntegrationAuthenticationPojo> fetchById(Long... values) {
        return fetch(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public IntegrationAuthenticationPojo fetchOneById(Long value) {
        return fetchOne(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.ID, value);
    }

    /**
     * Fetch records that have <code>appKey BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationAuthenticationPojo> fetchRangeOfAppkey(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.APPKEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>appKey IN (values)</code>
     */
    public List<IntegrationAuthenticationPojo> fetchByAppkey(String... values) {
        return fetch(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.APPKEY, values);
    }

    /**
     * Fetch records that have <code>appSecret BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationAuthenticationPojo> fetchRangeOfAppsecret(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.APPSECRET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>appSecret IN (values)</code>
     */
    public List<IntegrationAuthenticationPojo> fetchByAppsecret(String... values) {
        return fetch(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.APPSECRET, values);
    }

    /**
     * Fetch records that have <code>x509Certificate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationAuthenticationPojo> fetchRangeOfX509certificate(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.X509CERTIFICATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>x509Certificate IN (values)</code>
     */
    public List<IntegrationAuthenticationPojo> fetchByX509certificate(byte[]... values) {
        return fetch(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.X509CERTIFICATE, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationAuthenticationPojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<IntegrationAuthenticationPojo> fetchByCreateBy(String... values) {
        return fetch(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationAuthenticationPojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<IntegrationAuthenticationPojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(IntegrationAuthentication.INTEGRATION_AUTHENTICATION.CREATE_AT, values);
    }
}

/*
 * This file is generated by jOOQ.
 */
package oceanstars.ecommerce.integration.repository.generate.tables.daos;


import java.time.LocalDateTime;
import java.util.List;

import oceanstars.ecommerce.integration.repository.generate.tables.IntegrationRoute;
import oceanstars.ecommerce.integration.repository.generate.tables.pojos.IntegrationRoutePojo;
import oceanstars.ecommerce.integration.repository.generate.tables.records.IntegrationRouteRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class IntegrationRouteDao extends DAOImpl<IntegrationRouteRecord, IntegrationRoutePojo, Long> {

    /**
     * Create a new IntegrationRouteDao without any configuration
     */
    public IntegrationRouteDao() {
        super(IntegrationRoute.INTEGRATION_ROUTE, IntegrationRoutePojo.class);
    }

    /**
     * Create a new IntegrationRouteDao with an attached configuration
     */
    @Autowired
    public IntegrationRouteDao(Configuration configuration) {
        super(IntegrationRoute.INTEGRATION_ROUTE, IntegrationRoutePojo.class, configuration);
    }

    @Override
    public Long getId(IntegrationRoutePojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchById(Long... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public IntegrationRoutePojo fetchOneById(Long value) {
        return fetchOne(IntegrationRoute.INTEGRATION_ROUTE.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByCode(String... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public IntegrationRoutePojo fetchOneByCode(String value) {
        return fetchOne(IntegrationRoute.INTEGRATION_ROUTE.CODE, value);
    }

    /**
     * Fetch records that have <code>event BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfEvent(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.EVENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>event IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByEvent(String... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.EVENT, values);
    }

    /**
     * Fetch records that have <code>group BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfGroup(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.GROUP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>group IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByGroup(String... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.GROUP, values);
    }

    /**
     * Fetch records that have <code>service BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfService(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.SERVICE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>service IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByService(Long... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.SERVICE, values);
    }

    /**
     * Fetch records that have <code>gateway BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfGateway(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.GATEWAY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gateway IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByGateway(Long... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.GATEWAY, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByName(String... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByDescription(String... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfCreateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByCreateBy(String... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByCreateAt(LocalDateTime... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfUpdateBy(String lowerInclusive, String upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByUpdateBy(String... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.UPDATE_AT, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<IntegrationRoutePojo> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(IntegrationRoute.INTEGRATION_ROUTE.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<IntegrationRoutePojo> fetchByVersion(Integer... values) {
        return fetch(IntegrationRoute.INTEGRATION_ROUTE.VERSION, values);
    }
}
